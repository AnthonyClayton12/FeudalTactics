import org.apache.tools.ant.filters.ReplaceTokens

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/main/java" ]
sourceSets.test.java.srcDirs = [ "src/test/java" ]
sourceSets.main.resources.srcDirs = [ "resources/", "$buildDir/generated/resources" ]

eclipse.project.name = appName + "-core"

// put current version in config
processResources {
	from sourceSets.main.resources.srcDirs
	filter(ReplaceTokens, tokens: [version: project.version])
	duplicatesStrategy = "exclude"
}

// define and create resource destination
def resources_dest_path = "$buildDir/generated/resources"
mkdir(resources_dest_path)

// build license info text file
	def license_texts = ''
	// read prefix text
	license_texts += file('../dependency_licenses/licenses_pre.txt').text
	// iterate directories containing the dependency licenses
	def base_dir = file("../dependency_licenses")
	fileTree(dir: "../dependency_licenses").visit { FileVisitDetails dirDetails -> 
		if (dirDetails.directory) {
			license_texts += "\n" + dirDetails.file.name
			license_texts += "\n" + "-".multiply(dirDetails.file.name.length() * 1.2)
			fileTree(dir: dirDetails.file.path).visit { FileVisitDetails fileDetails -> 
				license_texts += "\n\n" + fileDetails.file.name
				license_texts += "\n" + fileDetails.file.text
			}
		}
	}
	// write the result
	new File("$resources_dest_path/licenses.txt").text = license_texts
	
// build full changelog
	def changelog_dir = "../metadata/en-US/changelogs/"
	def changelog = ''
	def fileNames = fileTree(changelog_dir).filter { it.isFile() }.files.name
	def availableVersions = fileNames.collect({it - ".txt"}).collect({it.toInteger()}).sort().reverse()
	availableVersions.each({
		String versionChangelog = file(changelog_dir + it + ".txt").text
		changelog += "\n\n\n" + versionChangelog
	})
	// write the result
	new File("$resources_dest_path/changelog.txt").text = changelog
  	
